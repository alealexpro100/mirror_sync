#!/bin/bash

# Check avaliable files by SHA256 sums. Corrupted files will be redownloaded. Requries mirror.list file, wget, md5sum, sha256sum, bash, coreutils.
if [[ ! -f $1 ]]; then
  echo "Check and fix script after apt-mirror. Requries path to config."
  echo "Example: $0 /etc/apt/mirror.list"
  exit 1
fi

mirror_path=$(grep -F "set base_path" "$1" | tr -s " " | cut -d' ' -f3)
declare -gx mirror_path
threads="$(nproc)"
if [[ $(command -v "$1" &> /dev/null) ]]; then
  parallel_command=parallel
else
  parallel_command=xargs
fi
echo -e "Help:\nN - Signature is correct.\nX - Signature is incorrect.\nE - File not found."
rm -rf "$mirror_path/mirror/download_X.sh" "$mirror_path/mirror/download_E.sh"

deb_check_file() {
  IFS=" " read -r -a file_sum <<< "$*"
  sum="${file_sum[0]}"
  file="${file_sum[1]}"
  if [[ -f $mirror_path/mirror/$file ]]; then
    if echo "$sum $mirror_path/mirror/$file" | $CHECK_COMMAND -c - &>> /dev/null; then
      echo -n 'N'
    else
      echo -n 'X'
      echo -e "rm -rf \"$mirror_path/mirror/$file\"\nwget -t 3 -O $mirror_path/mirror/$file https://$file" >> "$mirror_path/mirror/download_X.sh"
    fi
  else
   echo -n 'E'
   echo -e "wget -t 3 -O $mirror_path/mirror/$file https://$file" >> "$mirror_path/mirror/download_E.sh"
  fi
}
export -f deb_check_file

function check_by_hash() {

  local count sp="|\-/" s=1 N_f=0 X_f=0 E_f=0
  SECONDS=0
  count=$(< "$2" sort -u | wc -l)
  echo "Files to check ($1): $count"
  while IFS= read -r -n1 char; do
    [[ $char == "N" ]] && N_f=$((N_f+1))
    [[ $char == "X" ]] && X_f=$((X_f+1))
    [[ $char == "E" ]] && E_f=$((E_f+1))
    time=$SECONDS
    echo -ne "\e[2K[${sp:(i++)*s%${#sp}:s}] Progress: $((count-N_f)) left.; X:$((X_f)); E:$((E_f)); N:$((N_f)). $((time/60)) Min $((time%60)) Sec elapsed.\r"
  done < <(< "$2" sort -u | $parallel_command -I {} -n 1 -P "$threads" bash -c "CHECK_COMMAND=$1 deb_check_file \"\$@\"" _ {})
  echo -e "\nComplete!"
}

check_by_hash sha256sum "$mirror_path/var/BUGGY_SHA256"
check_by_hash md5sum "$mirror_path/var/MD5"
[[ -f "$mirror_path/mirror/download_X.sh" ]] && echo -e "Script for re-downloading files with incorrect signature: $mirror_path/mirror/download_X.sh"
[[ -f "$mirror_path/mirror/download_E.sh" ]] && echo -e "Script for downloading non-existing files: $mirror_path/mirror/download_E.sh"

# =)
echo "Script succesfully ended its work. Have a nice day!"
exit 0
