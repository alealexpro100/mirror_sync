#!/bin/bash

set -e

# Check avaliable files by SHA256 sums. Corrupted files will be redownloaded. Requries mirror.list file, wget, md5sum, sha256sum, bash, coreutils.
if [[ ! -f $1 ]]; then
  echo "Check and fix script after apt-mirror. Requries path to config."
  echo "Example: $0 /etc/apt/mirror.list"
  exit 1
fi

# Variables are exported to be avaliable in next bash sessions.
mirror_path=$(grep -F "set base_path" "$1" | tr -s " " | cut -d' ' -f3)
declare -gx mirror_path
threads="$(nproc)"
fix_script="$mirror_path/mirror/fix_files.sh"
declare -gx fix_script

echo "#!/bin/bash

#We check file hashes here again to prevent download
#of previously downloaded files after previous run of this script
function fix_file() {
  if [[ -f \$3 ]]; then
    if echo \"\$2 \$3\" | \$1 -c - &>> /dev/null; then
      echo \"File \$3 is correct!\"
    else
      echo \"Re-downloading incorrect file...\"
      wget -t 3 -O \$3 \$4
    fi
  else
    echo \"Re-downloading non-existing file...\"
    wget -t 3 -O \$3 \$4
  fi
}

" > "$fix_script"

echo -e "Help:\nN - Signature is correct.\nX - Signature is incorrect.\nE - File not found."

deb_check_file() {
  IFS=" " read -r -a file_sum <<< "$*"
  sum="${file_sum[0]}"
  file="${file_sum[1]}"
  if [[ -f $mirror_path/mirror/$file ]]; then
    if echo "$sum $mirror_path/mirror/$file" | $CHECK_COMMAND -c - &>> /dev/null; then
      echo -n 'N'
    else
      echo -n 'X'
      echo -e "fix_file $CHECK_COMMAND $sum $mirror_path/mirror/$file https://$file" >> "$fix_script"
    fi
  else
   echo -n 'E'
   echo -e "fix_file $CHECK_COMMAND $sum $mirror_path/mirror/$file https://$file" >> "$fix_script"
  fi
}
export -f deb_check_file

# Command `sort -u` prevents duplicate checks (they often exist).
# We don't need `parallel` command. Main limit is read speed.
# Command `xargs` is enough for both SSD and HDD.
function check_by_hash() {
  local count sp="|\-/" s=1 N_f=0 X_f=0 E_f=0
  SECONDS=0
  count=$(< "$2" sort -u | wc -l)
  echo "Files to check ($1): $count"
  while IFS= read -r -n1 char; do
    [[ $char == "N" ]] && N_f=$((N_f+1))
    [[ $char == "X" ]] && X_f=$((X_f+1))
    [[ $char == "E" ]] && E_f=$((E_f+1))
    time=$SECONDS
    echo -ne "\e[2K[${sp:(i++)*s%${#sp}:s}] Progress: $((count-N_f)) left.; X:$((X_f)); E:$((E_f)); N:$((N_f)). $((time/60)) Min $((time%60)) Sec elapsed.\r"
  done < <(< "$2" sort -u | xargs -I {} -n 1 -P "$threads" bash -c "CHECK_COMMAND=$1 deb_check_file \"\$@\"" _ {})
  echo -e "\nComplete!"
}

check_by_hash sha256sum "$mirror_path/var/BUGGY_SHA256"
check_by_hash md5sum "$mirror_path/var/MD5"
echo -e "Script for fixing files: $mirror_path/mirror/download_E.sh"

# =)
echo "Script succesfully ended its work. Have a nice day!"
exit 0
